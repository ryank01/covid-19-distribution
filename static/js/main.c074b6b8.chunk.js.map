{"version":3,"sources":["components/Charts.js","components/CaseChart.js","components/CaseData.js","components/Today.js","components/CountryData.js","components/SelectBox.js","components/CovidData.js","App.js","serviceWorker.js","index.js"],"names":["Charts","chartRef","React","createRef","myChart","this","createChart","props","chartData","undefined","length","dates","confirmed","recovered","deaths","active","forEach","element","push","date","sum","pointRadius","padding","isMobile","myChartRef","current","getContext","isEmpty","Chart","type","data","labels","datasets","label","borderColor","fill","options","animation","duration","easing","layout","left","right","top","bottom","legend","fontColor","boxWidth","title","display","scales","xAxes","ticks","maxTicksLimit","maxRotation","yAxes","text","selectedCountry","update","id","ref","Component","CaseChart","dailyArr","index","splice","tooltips","enabled","mode","gridLines","CaseData","changeInNumberFromPrevDay","sign","Col","md","sm","xs","className","class","Math","abs","color","Today","Row","CountryData","stats","Container","fluid","style","fontSize","fontWeight","SelectBox","span","offset","Form","Group","Control","as","custom","onChange","onChangeFunction","value","selectedValue","defaultValue","countryArr","map","country","key","CovidData","state","worldStats","selectedCounty","getData","bind","backToGlobalNumbers","fetch","then","response","json","Object","keys","i","countryData","worldChart","dailyData","setState","event","target","countryStats","lastUpdated","backgroundColor","textAlign","Button","onClick","tooltipBgColor","value-suffix","size","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c074b6b8.chunk.js","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\nimport {isEmpty} from \"lodash\";\nimport {isMobile} from 'react-device-detect';\n\nexport default class Charts extends React.Component {\n    chartRef = React.createRef();\n    constructor(){\n        super();\n        this.myChart ={};\n    }\n\n    componentDidMount(){\n        this.createChart(this.props);\n    }\n\n    componentDidUpdate(){\n        this.createChart(this.props);\n    }\n\n    createChart(props) {\n        if(props.chartData && props.chartData.length!==undefined){\n        var dates = [];\n        var confirmed = [];\n        var recovered = [];\n        var deaths = [];\n        var active = [];\n        props.chartData.forEach(element => {\n            dates.push(element.date);\n             confirmed.push(element.confirmed);\n             recovered.push(element.recovered);\n             deaths.push(element.deaths);\n             var sum =0;\n             active.push(sum+=element.confirmed-element.recovered-element.deaths)\n\n        });\n        let pointRadius = 3;\n        let padding = 50;\n        if(isMobile) {\n            pointRadius = 1;\n            padding = 5;\n        }\n\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        if(!isEmpty(this.myChart)) {\n            this.myChart.data.datasets[0].data = confirmed;\n            this.myChart.data.datasets[1].data = recovered;\n            this.myChart.data.datasets[2].data = deaths;\n            this.myChart.data.datasets[3].data = active;\n            this.myChart.options.title.text = props.selectedCountry;\n            this.myChart.update();\n        } else{ \n           /*  if(isMobile){\n                Chart.defaults.global.elements.point.borderWidth =0;\n            } */\n        this.myChart =  new Chart(myChartRef, {\n            type : \"line\",\n            data : {\n                labels: dates,\n                datasets: [\n                    {\n                        label: \"Confirmed\",\n                        data : confirmed,\n                        borderColor : '#4285f4',\n                        fill : false,\n                        pointRadius : pointRadius\n\n                    },{\n                        label: \"Recovered\",\n                        data : recovered,\n                        borderColor : '#0c9d58',\n                        fill : false,\n                        pointRadius : pointRadius\n                    },{\n                        label: \"Deaths\",\n                        data : deaths,\n                        borderColor : '#db4337',\n                        fill : false,\n                        pointRadius : pointRadius\n                    },{\n                        label: \"Active\",\n                        data : active,\n                        borderColor : '#f4b400',\n                        fill : false,\n                        pointRadius : pointRadius\n                    }\n                ]\n            },\n            options : {\n                animation : {\n                    duration : 1000, \n                    easing : 'easeInOutQuint'\n\n                },\n                layout : {\n                    padding : {\n                        left: padding,\n                        right : padding,\n                        top: padding,\n                        bottom: 10, \n                    },\n                },\n                legend : {\n\n                    labels : {\n                        fontColor: \"white\",\n                        boxWidth: isMobile ? 10: 40,\n                        padding : 10\n                    }\n                },\n                title : {\n                    display : false,\n                },\n                scales:{\n                    xAxes: [\n                        {\n                            ticks:{\n                                fontColor: \"white\",\n                                maxTicksLimit : isMobile ? 4 : 10,\n                                maxRotation : 0\n                            }\n                        }\n                    ],\n                    yAxes: [\n                        {\n                            ticks:{\n                                fontColor: \"white\",\n                                maxTicksLimit : isMobile ? 4 : 10,\n                                maxRotation : 0\n                            }\n                        }\n                    ]\n                }\n            }\n        })\n    }\n    }\n}\n\n\nrender(){\n\n    return(\n        <div>\n            <canvas id = \"myChart\" ref={this.chartRef}\n            />\n        </div>\n        \n    )\n}\n\n\n\n}","import React from 'react';\nimport Chart from 'chart.js';\nimport {isEmpty} from \"lodash\";\n\nexport default class CaseChart extends React.Component {\n    chartRef = React.createRef();\n    constructor(){\n        super();\n        this.myChart ={};\n    }\n\n    componentDidMount(){\n        this.createChart(this.props);\n    }\n\n    componentDidUpdate(){\n        this.createChart(this.props);\n    }\n\n    createChart(props) {\n        if(props.chartData && props.chartData.length!==undefined){\n            let dailyArr = [];\n            props.chartData.forEach((element, index) => {\n                dailyArr.push(element-props.chartData[index-1])\n            });\n   \n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        if(!isEmpty(this.myChart)) {\n            this.myChart.data.datasets[0].data = dailyArr.splice(-20);\n          \n            this.myChart.update();\n        } else{ \n        this.myChart = new Chart(myChartRef, {\n            type : \"line\",\n            data : {\n                labels: props.dates.splice(-20),\n                datasets: [\n                    {\n                        label: \"Confirmed\",\n                        data : dailyArr.splice(-20), \n                        borderColor : '#4285f4',\n                        fill : false,\n                       pointRadius : 0\n                    }\n                ]\n            },\n            options : {\n                animation : {\n                    duration : 2000, \n                    easing : 'easeInOutQuint'\n\n                },\n                tooltips : {\n                    enabled : true,\n                    mode : \"nearest\"\n                },\n                \n                legend : {\n                   display : false\n                },\n                title : {\n                    display : false,\n                   },\n                scales:{\n                    xAxes: [\n                        {\n                            ticks:{\n                                display : false\n                                },\n                                   gridLines: {\n                                       display : false\n                                   }\n                        }\n                    ],\n                    yAxes: [\n                        {\n                            ticks:{\n                                display : false\n                                },\n                                   gridLines: {\n                                       display : false\n                                   }\n                        }\n                    ]\n                }\n            }\n        })\n    }\n    }\n}\n\n\n\nrender(){\n\n    return(\n        <div>\n            <canvas id = \"myChart\" ref={this.chartRef}\n            />\n        </div>\n        \n    )\n}\n}\n\n\n","import React from 'react';\nimport {Col} from 'react-bootstrap';\nimport CaseChart from './CaseChart'\nfunction CaseData(props) {\n    var changeInNumberFromPrevDay = props.data[props.data.length-1]-props.data[props.data.length-2];\n    var sign = changeInNumberFromPrevDay > 0? \"+\" :\n    changeInNumberFromPrevDay < 0 ? \"-\" : \"\";\n    return (\n        <Col md={2} sm={4} xs={4} className={props.class}>\n            {props.data[props.data.length-1]}<br /> \n            {props.title}\n            <div>[{sign}{Math.abs(changeInNumberFromPrevDay)}]</div>\n            <CaseChart chartData={props.data} dates ={props.dates} color=\"#005C25\"/>\n        </Col>\n    )\n}\n\nexport default CaseData;","import React from 'react';\nimport {Row} from 'react-bootstrap';\nimport CaseData from './CaseData';\n\nfunction Today(props) {\n    if(props.data && props.data.length!==undefined) {\n        let confirmed=[], deaths=[],recovered=[],active=[], dates=[];\n        props.data.forEach((data) =>{\n            confirmed.push(data.confirmed);\n            deaths.push(data.deaths);\n            recovered.push(data.recovered);\n            active.push(data.confirmed - data.recovered - data.deaths);\n            dates.push(data.date);\n        })\n        return (\n            <Row className='today-row justify-content-center'>\n                <CaseData class=\"confirmed\"\n                    data={confirmed} dates={dates} title=\"Confirmed\" />\n    \n                <CaseData class=\"recovered\"\n                    data={recovered} dates={dates} title=\"Recovered\" />\n                \n                <CaseData class=\"deaths\"\n                    data={deaths} dates={dates} title=\"Deaths\" />\n                \n                <CaseData class=\"active\"\n                    data={active} dates={dates} title=\"Active\" />\n                \n            </Row>\n        )\n    }else{\n        return (<></>);\n    }\n    \n\n}\n\n\nexport default Today;","import React from 'react';\nimport Charts from './Charts';\nimport Today from './Today';\nimport { Container, Row, Col } from 'react-bootstrap'\n\n\nfunction CountryData(props) {\n    // world data having arrays for dates, confirmed, recovered,active and deaths\n    const chartData = props.stats;\n    const selectedCountry = props.selectedCountry;\n    return (\n        <Container fluid>\n            <Row>\n                <Col md={12} style={{ fontSize: 40, fontWeight: 'bold', padding: 20 }}>\n                    {selectedCountry}\n                    \n                </Col>\n            </Row>\n            <Today data={chartData} />\n            <div style={{ display: !selectedCountry && 'none' }}>\n                <Charts chartData={chartData} selectedCountry={selectedCountry} />\n            </div>\n        </Container>\n\n\n    )\n}\n\nexport default CountryData;","import React from 'react';\nimport {Col, Form} from 'react-bootstrap';\n\nfunction SelectBox(props) {\n    return (\n        <Col md={{ span: 4, offset: 5 }} >\n            <Form>\n                <Form.Group className=\"country-select\">\n                    <Form.Control as=\"select\" custom onChange={props.onChangeFunction} value = {props.selectedValue} defaultValue=\"select\">\n                        <option value=\"select\"> Search Country </option>\n                        {props.countryArr.map((country) => <option value={country} key={country}> {country}</option>)}\n                    </Form.Control>\n                </Form.Group>\n            </Form>\n        </Col>\n    )\n}\n\nexport default SelectBox;\n","import React from 'react';\nimport CountryData from './CountryData';\nimport { Container, Row, Col, Button} from 'react-bootstrap'\nimport SelectBox from './SelectBox';\nimport  { ReactWorldCountriesMap }  from \"react-world-countries-map\";   \n\nexport default class CovidData extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            countryArr: [],\n            data: {},\n            worldStats: {},\n            selectedCounty: \"\",\n           }\n        this.getData = this.getData.bind(this);\n        this.backToGlobalNumbers = this.backToGlobalNumbers.bind(this);\n        fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n            .then(response => response.json())\n            .then(data => {\n                var worldStats = { confirmed: 0, recovered: 0, deaths: 0 };\n                var countryArr = Object.keys(data).map(i => i);\n                countryArr.forEach((country) => {\n                    let countryData = data[country];\n                    // pick last object for today data\n                    countryData = countryData[countryData.length - 1];\n                    worldStats.confirmed += countryData.confirmed;\n                    worldStats.recovered += countryData.recovered;\n                    worldStats.deaths += countryData.deaths;\n                });\n                // world data\n                var worldChart = [];\n                countryArr.forEach((country) => {\n                    let countryData = data[country];\n                    countryData.forEach((dailyData, index) => {\n                        if (worldChart[index] === undefined) {\n                            var worldStats = { date: dailyData.date, confirmed: dailyData.confirmed, recovered: dailyData.recovered, deaths: dailyData.deaths };\n                            worldChart.push(worldStats);\n                        } else {\n                            worldChart[index].confirmed += dailyData.confirmed;\n                            worldChart[index].recovered += dailyData.recovered;\n                            worldChart[index].deaths += dailyData.deaths;\n                        }\n                    });\n\n                });\n                this.setState({\n                    countryArr: countryArr,\n                    data: data,\n                    worldStats: worldStats,\n                    worldChart: worldChart,\n                });\n            });\n\n    }\n\n\n\n    getData(event) {\n        var country = event.target.value;\n        if (country !== \"select\") {\n            this.setState({\n                selectedCountry: country,\n            });\n        } else {\n            this.setState({\n                selectedCountry: \"\",\n            })\n        }\n    }\n\n    backToGlobalNumbers() {\n        this.setState({\n            selectedCountry: \"\",\n        })\n    }\n    render() {\n        const countryStats = this.state.data[this.state.selectedCountry];\n        const worldChart = this.state.worldChart;\n        const lastUpdated = worldChart!==undefined?worldChart[worldChart.length-1].date:\"\";\n        // world map data\n        const data =\n        [\n            { country: \"cn\", value: 1389618778 }, // china\n            { country: \"in\", value: 1311559204 }, // india\n            { country: \"us\", value: 331883986 },  // united states\n            { country: \"id\", value: 264935824 },  // indonesia\n            { country: \"pk\", value: 210797836 },  // pakistan\n            { country: \"br\", value: 210301591 },  // brazil\n            { country: \"ng\", value: 208679114 },  // nigeria\n            { country: \"bd\", value: 161062905 },  // bangladesh\n            { country: \"ru\", value: 141944641 },  // russia\n            { country: \"mx\", value: 127318112 }   // mexico\n        ]   \n        return (\n            <Container fluid style={{ backgroundColor: '#f8f8ff', padding: 0 }} className=\"App\">\n                {/*Header starts here */}\n                <Row className=\"App-header\">\n                    <Col md={2} style={{ textAlign: 'left' }}>\n                        Covid-19 Data\n                    </Col>\n                    {/*Select Box for country search ends here */}\n                    <SelectBox onChangeFunction={this.getData} countryArr={this.state.countryArr} selectedValue={this.state.selectedCountry}/>\n                </Row>\n                {/*Header ends here */}\n                <Row>\n                     {/*Get back to global numbers */}\n                    <Col md={{span:1}} xs={1}>\n                    {this.state.selectedCountry ? \n                         <Button className='back' onClick={this.backToGlobalNumbers}>Back</Button>\n                  : <></>}\n                    </Col> \n                </Row>\n                <Container fluid style={{ color: '#f5deb3', padding: 0 }} className=\"App\">\n                    {this.state.selectedCountry ? \n                        <CountryData stats={countryStats} selectedCountry={this.state.selectedCountry} /> : \n                        <CountryData stats={worldChart} selectedCountry=\"Worldwide Distribution\"/>\n                        }\n                     <div className=\"map\">\n                        <div className=\"placeholder\">\n                            <ReactWorldCountriesMap tooltipBgColor=\"black\" color=\"blue\" value-suffix=\"people\" size=\"lg\" data={data} />\n                        </div>\n                     </div>\n                </Container>\n                <footer>\n                    <Row className=\"App-footer\">\n                        <Col md={2} xs={5}>\n                        {/*Last updated */}\n                        Last Updated: {lastUpdated}\n                        </Col>\n                        <Col md={{span:1, offset:9}} xs={{span:3, offset:4}}>\n                            <a href=\"https://github.com/pomber/covid19\">Datasource</a>\n                        \n                        </Col>\n                    </Row>\n                </footer>\n            </Container>\n        )\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport CovidData from './components/CovidData';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n  <div>\n      <CovidData />\n  </div>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}