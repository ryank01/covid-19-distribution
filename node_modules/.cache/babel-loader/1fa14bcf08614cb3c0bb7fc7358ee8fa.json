{"ast":null,"code":"var _jsxFileName = \"/home/ryan/codebase/covid-19-distribution/src/components/CovidData.js\";\nimport React from 'react';\nimport CountryData from './CountryData';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport SelectBox from './SelectBox';\nimport { ReactWorldCountriesMap } from \"react-world-countries-map\";\nexport default class CovidData extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      countryArr: [],\n      data: {},\n      worldStats: {},\n      selectedCounty: \"\"\n    };\n    this.getData = this.getData.bind(this);\n    this.backToGlobalNumbers = this.backToGlobalNumbers.bind(this);\n    fetch(\"https://pomber.github.io/covid19/timeseries.json\").then(response => response.json()).then(data => {\n      var worldStats = {\n        confirmed: 0,\n        recovered: 0,\n        deaths: 0\n      };\n      var countryArr = Object.keys(data).map(i => i);\n      countryArr.forEach(country => {\n        let countryData = data[country]; // pick last object for today data\n\n        countryData = countryData[countryData.length - 1];\n        worldStats.confirmed += countryData.confirmed;\n        worldStats.recovered += countryData.recovered;\n        worldStats.deaths += countryData.deaths;\n      }); // world data\n\n      var worldChart = [];\n      countryArr.forEach(country => {\n        let countryData = data[country];\n        countryData.forEach((dailyData, index) => {\n          if (worldChart[index] === undefined) {\n            var worldStats = {\n              date: dailyData.date,\n              confirmed: dailyData.confirmed,\n              recovered: dailyData.recovered,\n              deaths: dailyData.deaths\n            };\n            worldChart.push(worldStats);\n          } else {\n            worldChart[index].confirmed += dailyData.confirmed;\n            worldChart[index].recovered += dailyData.recovered;\n            worldChart[index].deaths += dailyData.deaths;\n          }\n        });\n      });\n      this.setState({\n        countryArr: countryArr,\n        data: data,\n        worldStats: worldStats,\n        worldChart: worldChart\n      });\n    });\n  }\n\n  getData(event) {\n    var country = event.target.value;\n\n    if (country !== \"select\") {\n      this.setState({\n        selectedCountry: country\n      });\n    } else {\n      this.setState({\n        selectedCountry: \"\"\n      });\n    }\n  }\n\n  backToGlobalNumbers() {\n    this.setState({\n      selectedCountry: \"\"\n    });\n  }\n\n  render() {\n    const countryStats = this.state.data[this.state.selectedCountry];\n    const worldChart = this.state.worldChart;\n    const lastUpdated = worldChart !== undefined ? worldChart[worldChart.length - 1].date : \"\"; // world map data\n\n    const data = [{\n      country: \"cn\",\n      value: 1389618778\n    }, // china\n    {\n      country: \"in\",\n      value: 1311559204\n    }, // india\n    {\n      country: \"us\",\n      value: 331883986\n    }, // united states\n    {\n      country: \"id\",\n      value: 264935824\n    }, // indonesia\n    {\n      country: \"pk\",\n      value: 210797836\n    }, // pakistan\n    {\n      country: \"br\",\n      value: 210301591\n    }, // brazil\n    {\n      country: \"ng\",\n      value: 208679114\n    }, // nigeria\n    {\n      country: \"bd\",\n      value: 161062905\n    }, // bangladesh\n    {\n      country: \"ru\",\n      value: 141944641\n    }, // russia\n    {\n      country: \"mx\",\n      value: 127318112\n    } // mexico\n    ];\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      style: {\n        backgroundColor: '#f8f8ff',\n        padding: 0\n      },\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      style: {\n        textAlign: 'left'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, \"Covid-19 Data\"), /*#__PURE__*/React.createElement(SelectBox, {\n      onChangeFunction: this.getData,\n      countryArr: this.state.countryArr,\n      selectedValue: this.state.selectedCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: {\n        span: 1\n      },\n      xs: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, this.state.selectedCountry ? /*#__PURE__*/React.createElement(Button, {\n      className: \"back\",\n      onClick: this.backToGlobalNumbers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 26\n      }\n    }, \"Back\") : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      style: {\n        color: '#f5deb3',\n        padding: 0\n      },\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, this.state.selectedCountry ? /*#__PURE__*/React.createElement(CountryData, {\n      stats: countryStats,\n      selectedCountry: this.state.selectedCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }) : /*#__PURE__*/React.createElement(CountryData, {\n      stats: worldChart,\n      selectedCountry: \"Worldwide Distribution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(ReactWorldCountriesMap, {\n      tooltipBgColor: \"black\",\n      color: \"blue\",\n      \"value-suffix\": \"people\",\n      size: \"lg\",\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"footer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"App-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      xs: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }\n    }, \"Last Updated: \", lastUpdated), /*#__PURE__*/React.createElement(Col, {\n      md: {\n        span: 1,\n        offset: 9\n      },\n      xs: {\n        span: 3,\n        offset: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/pomber/covid19\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 29\n      }\n    }, \"Datasource\")))));\n  }\n\n}","map":{"version":3,"sources":["/home/ryan/codebase/covid-19-distribution/src/components/CovidData.js"],"names":["React","CountryData","Container","Row","Col","Button","SelectBox","ReactWorldCountriesMap","CovidData","Component","constructor","state","countryArr","data","worldStats","selectedCounty","getData","bind","backToGlobalNumbers","fetch","then","response","json","confirmed","recovered","deaths","Object","keys","map","i","forEach","country","countryData","length","worldChart","dailyData","index","undefined","date","push","setState","event","target","value","selectedCountry","render","countryStats","lastUpdated","backgroundColor","padding","textAlign","span","color","offset"],"mappings":"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","sourcesContent":["import React from 'react';\nimport CountryData from './CountryData';\nimport { Container, Row, Col, Button} from 'react-bootstrap'\nimport SelectBox from './SelectBox';\nimport  { ReactWorldCountriesMap }  from \"react-world-countries-map\";   \n\nexport default class CovidData extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            countryArr: [],\n            data: {},\n            worldStats: {},\n            selectedCounty: \"\",\n           }\n        this.getData = this.getData.bind(this);\n        this.backToGlobalNumbers = this.backToGlobalNumbers.bind(this);\n        fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n            .then(response => response.json())\n            .then(data => {\n                var worldStats = { confirmed: 0, recovered: 0, deaths: 0 };\n                var countryArr = Object.keys(data).map(i => i);\n                countryArr.forEach((country) => {\n                    let countryData = data[country];\n                    // pick last object for today data\n                    countryData = countryData[countryData.length - 1];\n                    worldStats.confirmed += countryData.confirmed;\n                    worldStats.recovered += countryData.recovered;\n                    worldStats.deaths += countryData.deaths;\n                });\n                // world data\n                var worldChart = [];\n                countryArr.forEach((country) => {\n                    let countryData = data[country];\n                    countryData.forEach((dailyData, index) => {\n                        if (worldChart[index] === undefined) {\n                            var worldStats = { date: dailyData.date, confirmed: dailyData.confirmed, recovered: dailyData.recovered, deaths: dailyData.deaths };\n                            worldChart.push(worldStats);\n                        } else {\n                            worldChart[index].confirmed += dailyData.confirmed;\n                            worldChart[index].recovered += dailyData.recovered;\n                            worldChart[index].deaths += dailyData.deaths;\n                        }\n                    });\n\n                });\n                this.setState({\n                    countryArr: countryArr,\n                    data: data,\n                    worldStats: worldStats,\n                    worldChart: worldChart,\n                });\n            });\n\n    }\n\n\n\n    getData(event) {\n        var country = event.target.value;\n        if (country !== \"select\") {\n            this.setState({\n                selectedCountry: country,\n            });\n        } else {\n            this.setState({\n                selectedCountry: \"\",\n            })\n        }\n    }\n\n    backToGlobalNumbers() {\n        this.setState({\n            selectedCountry: \"\",\n        })\n    }\n    render() {\n        const countryStats = this.state.data[this.state.selectedCountry];\n        const worldChart = this.state.worldChart;\n        const lastUpdated = worldChart!==undefined?worldChart[worldChart.length-1].date:\"\";\n        // world map data\n        const data =\n        [\n            { country: \"cn\", value: 1389618778 }, // china\n            { country: \"in\", value: 1311559204 }, // india\n            { country: \"us\", value: 331883986 },  // united states\n            { country: \"id\", value: 264935824 },  // indonesia\n            { country: \"pk\", value: 210797836 },  // pakistan\n            { country: \"br\", value: 210301591 },  // brazil\n            { country: \"ng\", value: 208679114 },  // nigeria\n            { country: \"bd\", value: 161062905 },  // bangladesh\n            { country: \"ru\", value: 141944641 },  // russia\n            { country: \"mx\", value: 127318112 }   // mexico\n        ]   \n        return (\n            <Container fluid style={{ backgroundColor: '#f8f8ff', padding: 0 }} className=\"App\">\n                {/*Header starts here */}\n                <Row className=\"App-header\">\n                    <Col md={2} style={{ textAlign: 'left' }}>\n                        Covid-19 Data\n                    </Col>\n                    {/*Select Box for country search ends here */}\n                    <SelectBox onChangeFunction={this.getData} countryArr={this.state.countryArr} selectedValue={this.state.selectedCountry}/>\n                </Row>\n                {/*Header ends here */}\n                <Row>\n                     {/*Get back to global numbers */}\n                    <Col md={{span:1}} xs={1}>\n                    {this.state.selectedCountry ? \n                         <Button className='back' onClick={this.backToGlobalNumbers}>Back</Button>\n                  : <></>}\n                    </Col> \n                </Row>\n                <Container fluid style={{ color: '#f5deb3', padding: 0 }} className=\"App\">\n                    {this.state.selectedCountry ? \n                        <CountryData stats={countryStats} selectedCountry={this.state.selectedCountry} /> : \n                        <CountryData stats={worldChart} selectedCountry=\"Worldwide Distribution\"/>\n                        }\n                     <div className=\"map\">\n                        <ReactWorldCountriesMap tooltipBgColor=\"black\" color=\"blue\" value-suffix=\"people\" size=\"lg\" data={data} />\n                     </div>\n                </Container>\n                <footer>\n                    <Row className=\"App-footer\">\n                        <Col md={2} xs={5}>\n                        {/*Last updated */}\n                        Last Updated: {lastUpdated}\n                        </Col>\n                        <Col md={{span:1, offset:9}} xs={{span:3, offset:4}}>\n                            <a href=\"https://github.com/pomber/covid19\">Datasource</a>\n                        \n                        </Col>\n                    </Row>\n                </footer>\n            </Container>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}