{"ast":null,"code":"var _jsxFileName = \"/home/ryan/codebase/covid-19-distribution/src/components/CaseChart.js\";\nimport React from 'react';\nimport Chart from 'chart.js';\nimport { isEmpty } from \"lodash\";\nexport default class CaseChart extends React.Component {\n  constructor() {\n    super();\n    this.chartRef = React.createRef();\n    this.myChart = {};\n  }\n\n  componentDidMount() {\n    this.createChart(this.props);\n  }\n\n  componentDidUpdate() {\n    this.createChart(this.props);\n  }\n\n  createChart(props) {\n    if (props.chartData && props.chartData.length !== undefined) {\n      let dailyArr = [];\n      props.chartData.forEach((element, index) => {\n        dailyArr.push(element - props.chartData[index - 1]);\n      });\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n      if (!isEmpty(this.myChart)) {\n        this.myChart.data.datasets[0].data = dailyArr.splice(-20);\n        this.myChart.update();\n      } else {\n        this.myChart = new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n            labels: props.dates.splice(-20),\n            datasets: [{\n              label: \"Confirmed\",\n              data: dailyArr.splice(-20),\n              borderColor: '#4285f4',\n              fill: false,\n              pointRadius: 0\n            }]\n          },\n          options: {\n            animation: {\n              duration: 2000,\n              easing: 'easeInOutQuint'\n            },\n            tooltips: {\n              enabled: true,\n              mode: \"nearest\"\n            },\n            legend: {\n              display: false\n            },\n            title: {\n              display: false\n            },\n            scales: {\n              xAxes: [{\n                ticks: {\n                  display: false\n                },\n                gridLines: {\n                  display: false\n                }\n              }],\n              yAxes: [{\n                ticks: {\n                  display: false\n                },\n                gridLines: {\n                  display: false\n                }\n              }]\n            }\n          }\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/ryan/codebase/covid-19-distribution/src/components/CaseChart.js"],"names":["React","Chart","isEmpty","CaseChart","Component","constructor","chartRef","createRef","myChart","componentDidMount","createChart","props","componentDidUpdate","chartData","length","undefined","dailyArr","forEach","element","index","push","myChartRef","current","getContext","data","datasets","splice","update","type","labels","dates","label","borderColor","fill","pointRadius","options","animation","duration","easing","tooltips","enabled","mode","legend","display","title","scales","xAxes","ticks","gridLines","yAxes","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\nimport {isEmpty} from \"lodash\";\n\nexport default class CaseChart extends React.Component {\n    chartRef = React.createRef();\n    constructor(){\n        super();\n        this.myChart ={};\n    }\n\n    componentDidMount(){\n        this.createChart(this.props);\n    }\n\n    componentDidUpdate(){\n        this.createChart(this.props);\n    }\n\n    createChart(props) {\n        if(props.chartData && props.chartData.length!==undefined){\n            let dailyArr = [];\n            props.chartData.forEach((element, index) => {\n                dailyArr.push(element-props.chartData[index-1])\n            });\n   \n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        if(!isEmpty(this.myChart)) {\n            this.myChart.data.datasets[0].data = dailyArr.splice(-20);\n          \n            this.myChart.update();\n        } else{ \n        this.myChart = new Chart(myChartRef, {\n            type : \"line\",\n            data : {\n                labels: props.dates.splice(-20),\n                datasets: [\n                    {\n                        label: \"Confirmed\",\n                        data : dailyArr.splice(-20), \n                        borderColor : '#4285f4',\n                        fill : false,\n                       pointRadius : 0\n                    }\n                ]\n            },\n            options : {\n                animation : {\n                    duration : 2000, \n                    easing : 'easeInOutQuint'\n\n                },\n                tooltips : {\n                    enabled : true,\n                    mode : \"nearest\"\n                },\n                \n                legend : {\n                   display : false\n                },\n                title : {\n                    display : false,\n                   },\n                scales:{\n                    xAxes: [\n                        {\n                            ticks:{\n                                display : false\n                                },\n                                   gridLines: {\n                                       display : false\n                                   }\n                        }\n                    ],\n                    yAxes: [\n                        {\n                            ticks:{\n                                display : false\n                                },\n                                   gridLines: {\n                                       display : false\n                                   }\n                        }\n                    ]\n                }\n            }\n        })\n    }\n    }\n}\n\n\n\nrender(){\n\n    return(\n        <div>\n            <canvas id = \"myChart\" ref={this.chartRef}\n            />\n        </div>\n        \n    )\n}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}