{"ast":null,"code":"var _jsxFileName = \"/home/ryan/codebase/covid-19-distribution/src/components/Charts.js\";\nimport React from 'react';\nimport Chart from 'chart.js';\nimport { isEmpty } from \"lodash\";\nimport { isMobile } from 'react-device-detect';\nexport default class Charts extends React.Component {\n  constructor() {\n    super();\n    this.chartRef = React.createRef();\n    this.myChart = {};\n  }\n\n  componentDidMount() {\n    this.createChart(this.props);\n  }\n\n  componentDidUpdate() {\n    this.createChart(this.props);\n  }\n\n  createChart(props) {\n    if (props.chartData && props.chartData.length !== undefined) {\n      var dates = [];\n      var confirmed = [];\n      var recovered = [];\n      var deaths = [];\n      var active = [];\n      props.chartData.forEach(element => {\n        dates.push(element.date);\n        confirmed.push(element.confirmed);\n        recovered.push(element.recovered);\n        deaths.push(element.deaths);\n        var sum = 0;\n        active.push(sum += element.confirmed - element.recovered - element.deaths);\n      });\n      let pointRadius = 3;\n      let padding = 50;\n\n      if (isMobile) {\n        pointRadius = 1;\n        padding = 5;\n      }\n\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n      if (!isEmpty(this.myChart)) {\n        this.myChart.data.datasets[0].data = confirmed;\n        this.myChart.data.datasets[1].data = recovered;\n        this.myChart.data.datasets[2].data = deaths;\n        this.myChart.data.datasets[3].data = active;\n        this.myChart.options.title.text = props.selectedCountry;\n        this.myChart.update();\n      } else {\n        /*  if(isMobile){\n             Chart.defaults.global.elements.point.borderWidth =0;\n         } */\n        this.myChart = new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n            labels: dates,\n            datasets: [{\n              label: \"Confirmed\",\n              data: confirmed,\n              borderColor: '#4285f4',\n              fill: false,\n              pointRadius: pointRadius\n            }, {\n              label: \"Recovered\",\n              data: recovered,\n              borderColor: '#0c9d58',\n              fill: false,\n              pointRadius: pointRadius\n            }, {\n              label: \"Deaths\",\n              data: deaths,\n              borderColor: '#db4337',\n              fill: false,\n              pointRadius: pointRadius\n            }, {\n              label: \"Active\",\n              data: active,\n              borderColor: '#f4b400',\n              fill: false,\n              pointRadius: pointRadius\n            }]\n          },\n          options: {\n            animation: {\n              duration: 1000,\n              easing: 'easeInOutQuint'\n            },\n            layout: {\n              padding: {\n                left: padding,\n                right: padding,\n                top: padding,\n                bottom: 10\n              }\n            },\n            legend: {\n              labels: {\n                fontColor: \"white\",\n                boxWidth: isMobile ? 10 : 40,\n                padding: 10\n              }\n            },\n            title: {\n              display: false\n            },\n            scales: {\n              xAxes: [{\n                ticks: {\n                  fontColor: \"white\",\n                  maxTicksLimit: isMobile ? 4 : 10,\n                  maxRotation: 0\n                }\n              }],\n              yAxes: [{\n                ticks: {\n                  fontColor: \"white\",\n                  maxTicksLimit: isMobile ? 4 : 10,\n                  maxRotation: 0\n                }\n              }]\n            }\n          }\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/ryan/codebase/covid-19-distribution/src/components/Charts.js"],"names":["React","Chart","isEmpty","isMobile","Charts","Component","constructor","chartRef","createRef","myChart","componentDidMount","createChart","props","componentDidUpdate","chartData","length","undefined","dates","confirmed","recovered","deaths","active","forEach","element","push","date","sum","pointRadius","padding","myChartRef","current","getContext","data","datasets","options","title","text","selectedCountry","update","type","labels","label","borderColor","fill","animation","duration","easing","layout","left","right","top","bottom","legend","fontColor","boxWidth","display","scales","xAxes","ticks","maxTicksLimit","maxRotation","yAxes","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\nimport {isEmpty} from \"lodash\";\nimport {isMobile} from 'react-device-detect';\n\nexport default class Charts extends React.Component {\n    chartRef = React.createRef();\n    constructor(){\n        super();\n        this.myChart ={};\n    }\n\n    componentDidMount(){\n        this.createChart(this.props);\n    }\n\n    componentDidUpdate(){\n        this.createChart(this.props);\n    }\n\n    createChart(props) {\n        if(props.chartData && props.chartData.length!==undefined){\n        var dates = [];\n        var confirmed = [];\n        var recovered = [];\n        var deaths = [];\n        var active = [];\n        props.chartData.forEach(element => {\n            dates.push(element.date);\n             confirmed.push(element.confirmed);\n             recovered.push(element.recovered);\n             deaths.push(element.deaths);\n             var sum =0;\n             active.push(sum+=element.confirmed-element.recovered-element.deaths)\n\n        });\n        let pointRadius = 3;\n        let padding = 50;\n        if(isMobile) {\n            pointRadius = 1;\n            padding = 5;\n        }\n\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        if(!isEmpty(this.myChart)) {\n            this.myChart.data.datasets[0].data = confirmed;\n            this.myChart.data.datasets[1].data = recovered;\n            this.myChart.data.datasets[2].data = deaths;\n            this.myChart.data.datasets[3].data = active;\n            this.myChart.options.title.text = props.selectedCountry;\n            this.myChart.update();\n        } else{ \n           /*  if(isMobile){\n                Chart.defaults.global.elements.point.borderWidth =0;\n            } */\n        this.myChart =  new Chart(myChartRef, {\n            type : \"line\",\n            data : {\n                labels: dates,\n                datasets: [\n                    {\n                        label: \"Confirmed\",\n                        data : confirmed,\n                        borderColor : '#4285f4',\n                        fill : false,\n                        pointRadius : pointRadius\n\n                    },{\n                        label: \"Recovered\",\n                        data : recovered,\n                        borderColor : '#0c9d58',\n                        fill : false,\n                        pointRadius : pointRadius\n                    },{\n                        label: \"Deaths\",\n                        data : deaths,\n                        borderColor : '#db4337',\n                        fill : false,\n                        pointRadius : pointRadius\n                    },{\n                        label: \"Active\",\n                        data : active,\n                        borderColor : '#f4b400',\n                        fill : false,\n                        pointRadius : pointRadius\n                    }\n                ]\n            },\n            options : {\n                animation : {\n                    duration : 1000, \n                    easing : 'easeInOutQuint'\n\n                },\n                layout : {\n                    padding : {\n                        left: padding,\n                        right : padding,\n                        top: padding,\n                        bottom: 10, \n                    },\n                },\n                legend : {\n\n                    labels : {\n                        fontColor: \"white\",\n                        boxWidth: isMobile ? 10: 40,\n                        padding : 10\n                    }\n                },\n                title : {\n                    display : false,\n                },\n                scales:{\n                    xAxes: [\n                        {\n                            ticks:{\n                                fontColor: \"white\",\n                                maxTicksLimit : isMobile ? 4 : 10,\n                                maxRotation : 0\n                            }\n                        }\n                    ],\n                    yAxes: [\n                        {\n                            ticks:{\n                                fontColor: \"white\",\n                                maxTicksLimit : isMobile ? 4 : 10,\n                                maxRotation : 0\n                            }\n                        }\n                    ]\n                }\n            }\n        })\n    }\n    }\n}\n\n\nrender(){\n\n    return(\n        <div>\n            <canvas id = \"myChart\" ref={this.chartRef}\n            />\n        </div>\n        \n    )\n}\n\n\n\n}"]},"metadata":{},"sourceType":"module"}